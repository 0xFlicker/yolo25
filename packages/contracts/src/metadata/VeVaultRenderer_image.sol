// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "./Base64.sol";
import "./IMetaDataURI.sol";
import "./VeVaultRenderer_interface.sol";
import "./MetadataLib.sol";

contract VeVaultRendererImage is IVeVaultRendererImage {
    string private _asset;

    constructor(string memory asset) {
        _asset = asset;
    }

    function render(
        uint256 /* tokenId */,
        uint96 seed,
        uint128 /* maxValue */,
        Lock calldata lock,
        bool[80] memory isVRendered
    ) public view returns (string memory) {
        return generateSvg(seed, lock, isVRendered);
    }

    /**
   * @dev generates a top and bottom grid of checkmarks made up of 8 colors separated by empty space in the middle. 
     The lower the intensity, the more checkmarks will be missing in the two grids.
   * In addition, print the intensity value in the center of the grid, divided by wei (gasPriceGweiStr)
   */
    function generateSvg(
        uint96 seed,
        Lock calldata lock,
        bool[80] memory isVRendered
    ) public view returns (string memory) {
        bool isDark = seed % 2 == 0;

        return
            string.concat(
                '<?xml version="1.0" encoding="UTF-8"?><svg width="400" height="400"><defs><radialGradient id="SphereShade" cx="0.5" cy="0.5" r=".8" fx="0.35" fy="0.25"><stop offset="0"  stop-opacity="0"  /><stop offset=".3" stop-opacity="0.1"/><stop offset=".5" stop-opacity="0.3"/><stop offset=".9"  stop-opacity="1"  /></radialGradient></defs><rect width="100%" height="100%" fill="#',
                isDark ? "111111" : "EEEEEE",
                '" />',
                generateTopGrid(seed, isVRendered),
                generateValueText(uint128(lock.amount), isDark),
                generateBottomGrid(seed, isVRendered),
                "</svg>"
            );
    }

    function generateValueText(
        uint128 value,
        bool isDark
    ) internal view returns (string memory) {
        return
            string.concat(
                '<text x="50%" text-anchor="middle" style="white-space: pre; fill: #',
                isDark ? "EEEEEE" : "111111",
                '; font-family: Arial, sans-serif; font-size: 33.3px;" y="353">Locked ',
                MetadataLib.uint256ToStr(value, 18, 2),
                " ",
                _asset,
                "</text>"
            );
    }

    function generateTopGrid(
        uint96 seed,
        bool[80] memory isCheckRendered
    ) internal view returns (string memory) {
        return
            string.concat(
                getIconRow(seed, isCheckRendered, 0, "104"),
                getIconRow(seed, isCheckRendered, 8, "144"),
                getIconRow(seed, isCheckRendered, 16, "184"),
                getIconRow(seed, isCheckRendered, 24, "224"),
                getIconRow(seed, isCheckRendered, 32, "264")
            );
    }

    function generateBottomGrid(
        uint96 seed,
        bool[80] memory isCheckRendered
    ) internal view returns (string memory) {
        return
            string.concat(
                getIconRow(seed, isCheckRendered, 40, "400"),
                getIconRow(seed, isCheckRendered, 48, "440"),
                getIconRow(seed, isCheckRendered, 56, "480"),
                getIconRow(seed, isCheckRendered, 64, "520"),
                getIconRow(seed, isCheckRendered, 72, "560")
            );
    }

    /**
     * @dev generates a row of checkmarks. Checkmarks are generated with the following rules:
     * 1. For each element in the row, use checmarkGenerates to see if it exists
     * 2. If it exists, generate a checkmark with a random color
     * 3. Colors are generated by taking the seed and bit shifting it to the right by the index * 3
     */
    function getIconRow(
        uint96 seed,
        bool[80] memory isCheckRendered,
        uint8 startIndex,
        string memory yPos
    ) internal view returns (string memory) {
        // SVG is 512 pixels wide and the checks have a margin of 16 pixels between each other and a 104 pixel margin on the left and right
        return
            string.concat(
                '<g transform="translate(0 ',
                yPos,
                ')">',
                getRow2(seed, isCheckRendered, startIndex),
                getRow3(seed, isCheckRendered, startIndex),
                "</g>"
            );
    }

    /**
     * @dev generates a row of checkmarks. Checkmarks are generated with the following rules:
     * 1. For each element in the row, use checmarkGenerates to see if it exists
     * 2. If it exists, generate a checkmark with a random color
     * 3. Colors are generated by taking the seed and bit shifting it to the right by the index * 3
     */
    function getRow2(
        uint96 seed,
        bool[80] memory isCheckRendered,
        uint8 startIndex
    ) internal view returns (string memory) {
        // SVG is 512 pixels wide and the checks have a margin of 16 pixels between each other and a 104 pixel margin on the left and right
        return
            string.concat(
                isCheckRendered[startIndex]
                    ? getIcon(
                        MetadataLib.uint2hex(uint24(seed >> (startIndex * 3))),
                        "24"
                    )
                    : "",
                isCheckRendered[startIndex + 1]
                    ? getIcon(
                        MetadataLib.uint2hex(
                            uint24(seed >> ((startIndex + 1) * 3))
                        ),
                        "64"
                    )
                    : "",
                isCheckRendered[startIndex + 2]
                    ? getIcon(
                        MetadataLib.uint2hex(
                            uint24(seed >> ((startIndex + 2) * 3))
                        ),
                        "104"
                    )
                    : "",
                isCheckRendered[startIndex + 3]
                    ? getIcon(
                        MetadataLib.uint2hex(
                            uint24(seed >> ((startIndex + 3) * 3))
                        ),
                        "144"
                    )
                    : ""
            );
    }

    /**
     * @dev generates a row of checkmarks. Checkmarks are generated with the following rules:
     * 1. For each element in the row, use checmarkGenerates to see if it exists
     * 2. If it exists, generate a checkmark with a random color
     * 3. Colors are generated by taking the seed and bit shifting it to the right by the index * 3
     */
    function getRow3(
        uint96 seed,
        bool[80] memory isCheckRendered,
        uint8 startIndex
    ) internal view returns (string memory) {
        // SVG is 512 pixels wide and the checks have a margin of 16 pixels between each other and a 104 pixel margin on the left and right
        return
            string.concat(
                isCheckRendered[startIndex + 4]
                    ? getIcon(
                        MetadataLib.uint2hex(
                            uint24(seed >> ((startIndex + 4) * 3))
                        ),
                        "184"
                    )
                    : "",
                isCheckRendered[startIndex + 5]
                    ? getIcon(
                        MetadataLib.uint2hex(
                            uint24(seed >> ((startIndex + 5) * 3))
                        ),
                        "224"
                    )
                    : "",
                isCheckRendered[startIndex + 6]
                    ? getIcon(
                        MetadataLib.uint2hex(
                            uint24(seed >> ((startIndex + 6) * 3))
                        ),
                        "264"
                    )
                    : "",
                isCheckRendered[startIndex + 7]
                    ? getIcon(
                        MetadataLib.uint2hex(
                            uint24(seed >> ((startIndex + 7) * 3))
                        ),
                        "304"
                    )
                    : ""
            );
    }

    function getIcon(
        string memory colorStr,
        string memory xPos
    ) internal view returns (string memory) {
        return
            string.concat(
                '<g transform="translate(',
                xPos,
                ' 0)"><rect rx="5" ry="5" width="40" height="24" fill="#',
                colorStr,
                '"/><text x="20" y="16" font-size="12" text-anchor="middle" fill="white">',
                _asset,
                "</text></g>"
            );
    }
}
