// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "./DataChunkCompiler.sol";
import "./Base64.sol";
import "./IMetaDataURI.sol";
import "./VeVaultRenderer_interface.sol";
import "./MetadataLib.sol";

contract VeVaultRendererImage is IVeVaultRendererImage {
    IDataChunkCompiler private compiler;
    uint256 private immutable MAX_MINT_GAS_PRICE = 1000000; // 1000 gwei mint would show all checks
    IMetaDataURI public upgradeContract;

    function render(
        uint256 /* tokenId */,
        uint96 seed,
        uint128 value,
        uint128 /* maxValue */,
        uint64 /* unlockStartTime */,
        uint64 /* unlockEndTime */,
        bool /* isDarkMode */,
        bool[80] memory isVRendered
    ) public pure returns (string memory) {
        return generateSvg(seed, value, isVRendered);
    }

    /**
   * @dev generates a top and bottom grid of checkmarks made up of 8 colors separated by empty space in the middle. 
     The lower the intensity, the more checkmarks will be missing in the two grids.
   * In addition, print the intensity value in the center of the grid, divided by wei (gasPriceGweiStr)
   */
    function generateSvg(
        uint96 seed,
        uint128 value,
        bool[80] memory isVRendered
    ) public pure returns (string memory) {
        bool isDark = seed % 2 == 0;
        return
            string.concat(
                '<?xml version="1.0" encoding="UTF-8"?><svg aria-hidden="true" version="1.1" viewBox="0 0 512 688" xmlns="http://www.w3.org/2000/svg"><svg width="400" height="400"><defs><radialGradient id="SphereShade" cx="0.5" cy="0.5" r=".8" fx="0.35" fy="0.25"><stop offset="0"  stop-opacity="0"  /><stop offset=".3" stop-opacity="0.1"/><stop offset=".5" stop-opacity="0.3"/><stop offset=".9"  stop-opacity="1"  /></radialGradient></defs><rect width="100%" height="100%" fill="#',
                isDark ? "111111" : "EEEEEE",
                '" />',
                generateTopGrid(seed, isVRendered),
                generateValueText(value, isDark),
                generateBottomGrid(seed, isVRendered),
                "</svg>"
            );
    }

    function generateValueText(
        uint128 value,
        bool isDark
    ) internal pure returns (string memory) {
        return
            string.concat(
                '<text x="50%" text-anchor="middle" style="white-space: pre; fill: #',
                isDark ? "EEEEEE" : "111111",
                '; font-family: Arial, sans-serif; font-size: 33.3px;" y="353">Minted at ',
                MetadataLib.uint256ToStr(value),
                "</text>"
            );
    }

    function generateTopGrid(
        uint96 seed,
        bool[80] memory isCheckRendered
    ) internal pure returns (string memory) {
        return
            string.concat(
                getIconRow(seed, isCheckRendered, 0, "104"),
                getIconRow(seed, isCheckRendered, 8, "144"),
                getIconRow(seed, isCheckRendered, 16, "184"),
                getIconRow(seed, isCheckRendered, 24, "224"),
                getIconRow(seed, isCheckRendered, 32, "264")
            );
    }

    function generateBottomGrid(
        uint96 seed,
        bool[80] memory isCheckRendered
    ) internal pure returns (string memory) {
        return
            string.concat(
                getIconRow(seed, isCheckRendered, 40, "400"),
                getIconRow(seed, isCheckRendered, 48, "440"),
                getIconRow(seed, isCheckRendered, 56, "480"),
                getIconRow(seed, isCheckRendered, 64, "520"),
                getIconRow(seed, isCheckRendered, 72, "560")
            );
    }

    /**
     * @dev generates a row of checkmarks. Checkmarks are generated with the following rules:
     * 1. For each element in the row, use checmarkGenerates to see if it exists
     * 2. If it exists, generate a checkmark with a random color
     * 3. Colors are generated by taking the seed and bit shifting it to the right by the index * 3
     */
    function getIconRow(
        uint96 seed,
        bool[80] memory isCheckRendered,
        uint8 startIndex,
        string memory yPos
    ) internal pure returns (string memory) {
        // SVG is 512 pixels wide and the checks have a margin of 16 pixels between each other and a 104 pixel margin on the left and right
        return
            string.concat(
                '<g transform="translate(0 ',
                yPos,
                ')">',
                getRow2(seed, isCheckRendered, startIndex),
                getRow3(seed, isCheckRendered, startIndex),
                "</g>"
            );
    }

    /**
     * @dev generates a row of checkmarks. Checkmarks are generated with the following rules:
     * 1. For each element in the row, use checmarkGenerates to see if it exists
     * 2. If it exists, generate a checkmark with a random color
     * 3. Colors are generated by taking the seed and bit shifting it to the right by the index * 3
     */
    function getRow2(
        uint96 seed,
        bool[80] memory isCheckRendered,
        uint8 startIndex
    ) internal pure returns (string memory) {
        // SVG is 512 pixels wide and the checks have a margin of 16 pixels between each other and a 104 pixel margin on the left and right
        return
            string.concat(
                isCheckRendered[startIndex]
                    ? getIcon(
                        MetadataLib.uint2hex(uint24(seed >> (startIndex * 3))),
                        "104"
                    )
                    : "",
                isCheckRendered[startIndex + 1]
                    ? getIcon(
                        MetadataLib.uint2hex(
                            uint24(seed >> ((startIndex + 1) * 3))
                        ),
                        "144"
                    )
                    : "",
                isCheckRendered[startIndex + 2]
                    ? getIcon(
                        MetadataLib.uint2hex(
                            uint24(seed >> ((startIndex + 2) * 3))
                        ),
                        "184"
                    )
                    : "",
                isCheckRendered[startIndex + 3]
                    ? getIcon(
                        MetadataLib.uint2hex(
                            uint24(seed >> ((startIndex + 3) * 3))
                        ),
                        "224"
                    )
                    : ""
            );
    }

    /**
     * @dev generates a row of checkmarks. Checkmarks are generated with the following rules:
     * 1. For each element in the row, use checmarkGenerates to see if it exists
     * 2. If it exists, generate a checkmark with a random color
     * 3. Colors are generated by taking the seed and bit shifting it to the right by the index * 3
     */
    function getRow3(
        uint96 seed,
        bool[80] memory isCheckRendered,
        uint8 startIndex
    ) internal pure returns (string memory) {
        // SVG is 512 pixels wide and the checks have a margin of 16 pixels between each other and a 104 pixel margin on the left and right
        return
            string.concat(
                isCheckRendered[startIndex + 4]
                    ? getIcon(
                        MetadataLib.uint2hex(
                            uint24(seed >> ((startIndex + 4) * 3))
                        ),
                        "264"
                    )
                    : "",
                isCheckRendered[startIndex + 5]
                    ? getIcon(
                        MetadataLib.uint2hex(
                            uint24(seed >> ((startIndex + 5) * 3))
                        ),
                        "304"
                    )
                    : "",
                isCheckRendered[startIndex + 6]
                    ? getIcon(
                        MetadataLib.uint2hex(
                            uint24(seed >> ((startIndex + 6) * 3))
                        ),
                        "344"
                    )
                    : "",
                isCheckRendered[startIndex + 7]
                    ? getIcon(
                        MetadataLib.uint2hex(
                            uint24(seed >> ((startIndex + 7) * 3))
                        ),
                        "384"
                    )
                    : ""
            );
    }

    function getIcon(
        string memory colorStr,
        string memory xPos
    ) internal pure returns (string memory) {
        return
            string.concat(
                '<g transform="translate(',
                xPos,
                ' 0)" fill="#',
                colorStr,
                '"><path d="M22.25 12c0-1.43-.88-2.67-2.19-3.34.46-1.39.2-2.9-.81-3.91s-2.52-1.27-3.91-.81c-.66-1.31-1.91-2.19-3.34-2.19s-2.67.88-3.33 2.19c-1.4-.46-2.91-.2-3.92.81s-1.26 2.52-.8 3.91c-1.31.67-2.2 1.91-2.2 3.34s.89 2.67 2.2 3.34c-.46 1.39-.21 2.9.8 3.91s2.52 1.26 3.91.81c.67 1.31 1.91 2.19 3.34 2.19s2.68-.88 3.34-2.19c1.39.45 2.9.2 3.91-.81s1.27-2.52.81-3.91c1.31-.67 2.19-1.91 2.19-3.34zm-11.71 4.2L6.8 12.46l1.41-1.42 2.26 2.26 4.8-5.23 1.47 1.36-6.2 6.77z" fill="#',
                colorStr,
                '"/></g>'
            );
    }
}
